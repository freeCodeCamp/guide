{
    "data": {
        "allDocumentationJs": {
            "edges": [
                {
                    "node": {
                        "name": "onRenderBody",
                        "description": {
                            "childMarkdownRemark": {
                                "html": "<p>Called after every page Gatsby server renders while building HTML so you can\nset head and body components to be rendered in your <code>html.js</code>.</p>\n<p>Gatsby does a two-pass render for HTML. It loops through your pages first\nrendering only the body and then takes the result body HTML string and\npasses it as the <code>body</code> prop to your <code>html.js</code> to complete the render.</p>\n<p>It’s often handy to be able to send custom components to your <code>html.js</code>.\nFor example, it’s a very common pattern for React.js libraries that\nsupport server rendering to pull out data generated during the render to\nadd to your HTML.</p>\n<p>Using this API over <a href=\"#replaceRenderer\"><code>replaceRenderer</code></a> is preferable as\nmultiple plugins can implement this API where only one plugin can take\nover server rendering. However, if your plugin requires taking over server\nrendering then that’s the one to\nuse</p>"
                            }
                        },
                        "returns": [],
                        "examples": [
                            {
                                "highlighted": "<span class=\"token keyword\">import</span> helmet <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-helmet\"</span>\n\nexports<span class=\"token punctuation\">.</span>onRenderBody <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> setHeadComponents <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> pluginOptions<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setHeadComponents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    helmet<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    helmet<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    helmet<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">.</span><span class=\"token function\">toComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>"
                            }
                        ],
                        "params": [
                            {
                                "name": "$0",
                                "type": {
                                    "name": "Object"
                                },
                                "description": null,
                                "properties": [
                                    {
                                        "name": "setHeadComponents",
                                        "type": {
                                            "name": "function"
                                        },
                                        "description": {
                                            "childMarkdownRemark": {
                                                "html": "<p>Takes an array of components as its\nfirst argument which are added to the <code>headComponents</code> array which is passed\nto the <code>html.js</code> component.</p>"
                                            }
                                        },
                                        "properties": null
                                    },
                                    {
                                        "name": "setPostBodyComponents",
                                        "type": {
                                            "name": "function"
                                        },
                                        "description": {
                                            "childMarkdownRemark": {
                                                "html": "<p>Takes an array of components as its\nfirst argument which are added to the <code>postBodyComponents</code> array which is passed\nto the <code>html.js</code> component.</p>"
                                            }
                                        },
                                        "properties": null
                                    },
                                    {
                                        "name": "setBodyProps",
                                        "type": {
                                            "name": "function"
                                        },
                                        "description": {
                                            "childMarkdownRemark": {
                                                "html": "<p>Takes an object of data which\nis merged with other body props and passed to <code>html.js</code> as <code>bodyProps</code>.</p>"
                                            }
                                        },
                                        "properties": null
                                    }
                                ]
                            },
                            {
                                "name": "pluginOptions",
                                "type": {
                                    "name": "Object"
                                },
                                "description": null,
                                "properties": null
                            }
                        ]
                    }
                },
                {
                    "node": {
                        "name": "replaceRenderer",
                        "description": {
                            "childMarkdownRemark": {
                                "html": "<p>Replace the default server renderer. This is useful for integration with\nRedux, css-in-js libraries, etc. that need custom setups for server\nrendering.</p>"
                            }
                        },
                        "returns": [],
                        "examples": [
                            {
                                "highlighted": "<span class=\"token comment\" spellcheck=\"true\">// From gatsby-plugin-glamor</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderToString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/server\"</span>\n<span class=\"token keyword\">import</span> inline <span class=\"token keyword\">from</span> <span class=\"token string\">\"glamor-inline\"</span>\n\nexports<span class=\"token punctuation\">.</span>replaceRenderer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> bodyComponent<span class=\"token punctuation\">,</span> replaceBodyHTMLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bodyHTML <span class=\"token operator\">=</span> <span class=\"token function\">renderToString</span><span class=\"token punctuation\">(</span>bodyComponent<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> inlinedHTML <span class=\"token operator\">=</span> <span class=\"token function\">inline</span><span class=\"token punctuation\">(</span>bodyHTML<span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">replaceBodyHTMLString</span><span class=\"token punctuation\">(</span>inlinedHTML<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>"
                            }
                        ],
                        "params": [
                            {
                                "name": "$0",
                                "type": {
                                    "name": "Object"
                                },
                                "description": null,
                                "properties": [
                                    {
                                        "name": "replaceBodyHTMLString",
                                        "type": {
                                            "name": "function"
                                        },
                                        "description": {
                                            "childMarkdownRemark": {
                                                "html": "<p>Call this with the HTML string\nyou render. <strong>WARNING</strong> if multiple plugins implement this API it’s the\nlast plugin that “wins”. TODO implement an automated warning against this.</p>"
                                            }
                                        },
                                        "properties": null
                                    },
                                    {
                                        "name": "setHeadComponents",
                                        "type": {
                                            "name": "function"
                                        },
                                        "description": {
                                            "childMarkdownRemark": {
                                                "html": "<p>Takes an array of components as its\nfirst argument which are added to the <code>headComponents</code> array which is passed\nto the <code>html.js</code> component.</p>"
                                            }
                                        },
                                        "properties": null
                                    },
                                    {
                                        "name": "setPostBodyComponents",
                                        "type": {
                                            "name": "function"
                                        },
                                        "description": {
                                            "childMarkdownRemark": {
                                                "html": "<p>Takes an array of components as its\nfirst argument which are added to the <code>postBodyComponents</code> array which is passed\nto the <code>html.js</code> component.</p>"
                                            }
                                        },
                                        "properties": null
                                    },
                                    {
                                        "name": "setBodyProps",
                                        "type": {
                                            "name": "function"
                                        },
                                        "description": {
                                            "childMarkdownRemark": {
                                                "html": "<p>Takes an object of data which\nis merged with other body props and passed to <code>html.js</code> as <code>bodyProps</code>.</p>"
                                            }
                                        },
                                        "properties": null
                                    }
                                ]
                            },
                            {
                                "name": "pluginOptions",
                                "type": {
                                    "name": "Object"
                                },
                                "description": null,
                                "properties": null
                            }
                        ]
                    }
                }
            ]
        }
    },
    "pathContext": {}
}