{"version":3,"sources":["../../src/cache-dir/app.js"],"names":["apiRunner","require","navigator","serviceWorker","getRegistrations","then","registrations","registration","unregister","rootElement","document","getElementById","Root","default","render","module","hot","accept","NextRoot"],"mappings":";;;;;;AAIA;;;;AACA;;;;AACA;;;;AANA,IAAMA,YAAYC,QAAS;AAC3B;AADkB,CAAlB,CAEAD,UAAW,eAAX;;AAMA;;;;;;;;AAQA,IAAK,eAAD,IAAmBE,SAAvB,EAAkC;AAChCA,YAAUC,aAAV,CAAwBC,gBAAxB,GAA2CC,IAA3C,CAAgD,yBAAiB;AAAA;AAAA;AAAA;;AAAA;AAC/D,sDAAyBC,aAAzB,4GAAwC;AAAA,YAA/BC,YAA+B;;AACtCA,qBAAaC,UAAb;AACD;AAH8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIhE,GAJD;AAKD;;AAED,IAAMC,cAAcC,SAASC,cAAT,CAAyB,WAAzB,CAApB;;AAEA,IAAIC,OAAOX,QAAS,QAAT,CAAX;AACA,IAAIW,KAAKC,OAAT,EAAkB;AAChBD,SAAOA,KAAKC,OAAZ;AACD;;AAED,mBAASC,MAAT,CACE;AAAA;AAAA;AACE,gCAAC,IAAD;AADF,CADF,EAIEL,WAJF;;AAOA,IAAIM,OAAOC,GAAX,EAAgB;AACdD,SAAOC,GAAP,CAAWC,MAAX,CAAmB,QAAnB,EAA4B,YAAM;AAChC,QAAIC,WAAWjB,QAAS,QAAT,CAAf;AACA,QAAIiB,SAASL,OAAb,EAAsB;AACpBK,iBAAWA,SAASL,OAApB;AACD;AACD,uBAASC,MAAT,CACE;AAAA;AAAA;AACE,oCAAC,QAAD;AADF,KADF,EAIEL,WAJF;AAMD,GAXD;AAYD","file":"app.js","sourcesContent":["const apiRunner = require(`./api-runner-browser`)\n// Let the site/plugins run code very early.\napiRunner(`onClientEntry`)\n\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { AppContainer as HotContainer } from \"react-hot-loader\"\n\n/**\n * Service Workers are persistent by nature. They stick around,\n * serving a cached version of the site if they aren't removed.\n * This is especially frustrating when you need to test the\n * production build on your local machine.\n *\n * Let's unregister the service workers in development, and tidy up a few errors.\n */\nif (`serviceWorker` in navigator) {\n  navigator.serviceWorker.getRegistrations().then(registrations => {\n    for (let registration of registrations) {\n      registration.unregister()\n    }\n  })\n}\n\nconst rootElement = document.getElementById(`___gatsby`)\n\nlet Root = require(`./root`)\nif (Root.default) {\n  Root = Root.default\n}\n\nReactDOM.render(\n  <HotContainer>\n    <Root />\n  </HotContainer>,\n  rootElement\n)\n\nif (module.hot) {\n  module.hot.accept(`./root`, () => {\n    let NextRoot = require(`./root`)\n    if (NextRoot.default) {\n      NextRoot = NextRoot.default\n    }\n    ReactDOM.render(\n      <HotContainer>\n        <NextRoot />\n      </HotContainer>,\n      rootElement\n    )\n  })\n}\n"]}