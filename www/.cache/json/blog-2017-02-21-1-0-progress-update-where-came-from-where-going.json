{
    "data": {
        "markdownRemark": {
            "html": "<p><div>\n          <a\n            class=\"gatsby-resp-image-link\"\n            href=\"/36d57a55e7958223d8e1edc7d4bb0a38-c3e50.png\"\n            style=\"display: block\"\n            target=\"_blank\"\n          >\n            <div\n              class=\"gatsby-resp-image-wrapper\"\n              style=\"position: relative; z-index: -1; \"\n            >\n              <div\n                class=\"gatsby-resp-image-background-image\"\n                style=\"padding-bottom: 53.50262697022766%;position: relative; width: 100%; bottom: 0; left: 0; background-image: url('/36d57a55e7958223d8e1edc7d4bb0a38-fbfd7.png'); background-size: cover;\"\n              >\n                <img\n                  class=\"gatsby-resp-image-image\"\n                  style=\"width: 100%; margin: 0; vertical-align: middle; position: absolute; box-shadow: inset 0px 0px 0px 400px #f7f0eb;\"\n                  alt=\"Gatsbygram\"\n                  title=\"\"\n                  src=\"/36d57a55e7958223d8e1edc7d4bb0a38-fbfd7.png\"\n                  srcset=\"/36d57a55e7958223d8e1edc7d4bb0a38-bf506.png 173w,\n/36d57a55e7958223d8e1edc7d4bb0a38-e924d.png 345w,\n/36d57a55e7958223d8e1edc7d4bb0a38-fbfd7.png 690w,\n/36d57a55e7958223d8e1edc7d4bb0a38-89b1d.png 1035w,\n/36d57a55e7958223d8e1edc7d4bb0a38-9c993.png 1380w,\n/36d57a55e7958223d8e1edc7d4bb0a38-00d0f.png 2070w,\n/36d57a55e7958223d8e1edc7d4bb0a38-c3e50.png 2284w\"\n                  sizes=\"(max-width: 690px) 100vw, 690px\"\n                />\n              </div>\n            </div>\n          </a>\n          </div></p>\n<p>Imagine for a moment the perfect website framework. One that produced\nreally fast sites by default, that let you use the latest web tools and\nbrowser features without complicated setup, and that helped your team\nstay coordinated as you develop, ship, and maintain sites.</p>\n<p>This framework would have to be:</p>\n<ul>\n<li><strong>universal</strong>, work for all types of sites from simple brocurewares to\ncomplex web-apps.</li>\n<li><strong>simple</strong>, not requiring any setup to start using and with thoughtful\nAPIs to extend the framework.</li>\n<li><strong>fast</strong>, doesn‚Äôt lose customers to slow page loads. Takes advantage of\nHTTP/2, browser caching, service workers, inlined critical css, and code\nsplitting so your site always loads incredibly fast‚Äîno matter what you\nbuild.</li>\n<li><strong>JavaScript-driven</strong>, the web is huge and intensely competitive.\nSites that win are fast and richly interactive. Your framework must make\nit trivial to use advanced JavaScript.</li>\n<li><strong>team ready</strong>, use industry standard collaboration tools like NPM,\nGit, and continuous deployment, so your team is always on the same page\nand shipping new features is easy.</li>\n<li><strong>modular</strong>, allows for cleanly separated features so fixing bugs and\nadding new features is easy and complexity is contained.</li>\n<li><strong>internet scale</strong>, launch your site to millions without crashing your\nsite (or your wallet).</li>\n<li><strong>secure</strong>, doesn‚Äôt put your your users‚Äô data at risk of hacking.</li>\n</ul>\n<p>I believe that Gatsby fulfills these requirements. After several years\nof working on the project and seeing it used successfully by many people\non a wide variety of sites, I‚Äôm confident that Gatsby works.</p>\n<p>Since I open sourced Gatsby in 2015, it‚Äôs collected over <strong>8000 stars</strong>\non Github (by far the most stars on Github for a project of its type),\nbeen joined by <strong>122 contributors</strong>, and <strong>downloaded 130,000</strong> times!</p>\n<p>In mid-2016, I decided to <a href=\"https://www.bricolage.io/gatsby-open-source-work/\">work full-time on\nGatsby</a> and started\nresearching and prototyping ideas that are now coming together as Gatsby\n1.0.</p>\n<h2 id=\"what-is-gatsby\"><a href=\"#what-is-gatsby\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Gatsby</h2>\n<p>Gatsby combines the fast performance of static websites with the\npowerful abstractions, excellent tools, and client capabilities of\nthe web-app world.</p>\n<p>It is a general purpose data-centric web framework that is <a href=\"https://github.com/gatsbyjs/gatsby#sites-built-with-gatsby\">successfully\nbeing used for a wide variety of\nsites</a>\nincluding blogs, marketing sites, documentation sites, and e-commerce.</p>\n<p>It wraps three of the most popular web app tools into a cohesive website\nframework:</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/\">React</a> from Facebook for building UIs</li>\n<li><a href=\"https://webpack.js.org/\">Webpack</a> for bundling JavaScript and CSS</li>\n<li><a href=\"http://graphql.org/\">GraphQL</a> from Facebook for declarative data queries</li>\n</ul>\n<p>While designing Gatsby, I wanted a synthesis of two of my favorite\ndeveloper experiences. The simplicity of building sites with markdown\nand static site generators and the powerful hot-reloading environment of\nthe React world.</p>\n<p><img src=\"https://camo.githubusercontent.com/0506699aaaae2f9772cc381b92f2aa5e14eba296/687474703a2f2f7a697070792e6766796361742e636f6d2f556c74696d6174655765656b6c7942617265626972646261742e676966\" alt=\"Gatsby development\nexperience\"></p>\n<p>When loading a page in a Gatsby site, browsers first load the page‚Äôs\npre-built HTML file and then load the minimum JavaScript needed to make\nthat page interactive.</p>\n<p>Because Gatsby sites are just static files, you‚Äôre ensured a much more\n<em>carefree deployment</em>. There are no <em>complicated databases</em> to install\nand maintain and <em>web-servers to scale</em> and protect against hacking.</p>\n<p>Serving static files ensures consistent <em>super fast load times</em>. Once\nyour site is loaded, Gatsby automatically <em>pre-fetches</em> adjacent pages.\nThis means navigating around your site feels <em>instantaneous</em> as all the\ncontent and scripts for the next page has been loaded already.  Since\nyou‚Äôre reading this on a Gatsby site, try clicking on a link in the\nheader and then click back (note, this site is still being worked on as we\napproach 1.0).  A bit faster than your current site no? üòú</p>\n<h2 id=\"apps-vs-sites\"><a href=\"#apps-vs-sites\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apps vs sites</h2>\n<p>From nearly the beginning of the web, the idea of the web as an\napplication platform has competed with the idea of the web as a series\nof ‚Äúdocuments‚Äù.</p>\n<p>In recent years, the ‚Äúapp‚Äù paradigm has gained steam as dozens of\nJavaScript frameworks and other JavaScript tools have been released,\nexploring ideas and competing for mind-share.</p>\n<p>100s of millions of dollars have been invested by the largest companies\nin the world in these JavaScript frameworks and the larger ecosystem of\ntools surrounding them.</p>\n<p>The improvement has been dramatic and exhilarating. I can remember many\nthings I struggled for weeks to build in ~2010-2013 that took me days or\neven hours once I‚Äôd adopted React.</p>\n<p>React has taken over the web world and for good reason. Its three big\nideas, composable components, lifecycle APIs, and one-way data flow\ndramatically <em>simplify</em> web UI development. Things that are really hard\nto build within other paradigms feel almost easy with React.</p>\n<h2 id=\"time-for-a-javascript-web-framework\"><a href=\"#time-for-a-javascript-web-framework\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time for a JavaScript web framework?</h2>\n<p>The internet runs on Open Source CMSs‚Äîprimarily Wordpress and Drupal.  I\nspent most of college building Drupal websites and writing <a href=\"https://www.bricolage.io/first-beta-release-drupal-native-mailinglist-module/\">open-source\nDrupal\nmodules</a>.\nMy first startup job was at <a href=\"https://pantheon.io\">Pantheon</a>‚Äîwhere I\nhelped <a href=\"https://www.bricolage.io/new-beginnings/\">design and build developer tools</a>\nfor teams building Drupal &#x26; Wordpress sites.</p>\n<p>These open source CMSs are <em>extraordinary tools and have remarkably dynamic\necosystems</em>. They truly run the web.  Wordpress alone runs more than 25%\nof all websites on the internet!</p>\n<p>But still, the time seems ripe for a client-centric web framework.</p>\n<p>As more and more sites are expected to become app-like there‚Äôs been a\n<em>rush to add more JavaScript into our sites</em> resulting in an explosion of\ntool complexity resulting in, at times, poorly optimized sites that ship\nfar too much JavaScript at the wrong times bogging down the site.</p>\n<p>But it doesn‚Äôt need to be this way. We use web frameworks because they\n<em>embed smart ideas about how to organize our code</em> so we‚Äôre guided towards\nbuilding fast sites that are simple to build and maintain.</p>\n<p>Gatsby aims to be a <em>modern web framework</em> that‚Äôs designed with the\nassumption that you need a rich client. Gatsby bakes in modern\nJavaScript compiler and bundling tools along with a full asset pipeline\nso you can just start writing your website and <em>be confident things will\nwork</em>.</p>\n<h2 id=\"gatsby-10-setting-the-foundation-for-a-modern-javascript-website-framework\"><a href=\"#gatsby-10-setting-the-foundation-for-a-modern-javascript-website-framework\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gatsby 1.0: Setting the foundation for a modern JavaScript website framework</h2>\n<p>I started working on the <a href=\"https://github.com/gatsbyjs/gatsby/tree/1.0\">1.0\nbranch</a> in August and after\nmonths of hard work, our first beta release is in sight.</p>\n<p>The changes for 1.0 can be organized into a few areas.</p>\n<h3 id=\"add-service-worker-and-offline-support\"><a href=\"#add-service-worker-and-offline-support\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add service worker and offline support</h3>\n<p>Service workers are perhaps the most exciting technology that‚Äôs come to\nthe web in the past several years. It makes possible (finally!)\nsophisticated client caching plus true offline support. I‚Äôve added\nexcellent on-by-default support to Gatsby for Service Workers and a\ngreat offline experience. If you‚Äôre using Chrome or Firefox, this site\nloads offline! <em>Service workers make your site much more resilient\nagainst bad networks</em>. If someone loads your site on a train and goes\nthrough a tunnel, you won‚Äôt lose them as they‚Äôll still be able to keep\nclicking around.</p>\n<h3 id=\"route-based-code-splitting\"><a href=\"#route-based-code-splitting\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Route-based code splitting</h3>\n<p>Many sites generate one JavaScript bundle for the <em>entire</em> site. Which\nmeans someone loading your frontpage loads far more code than is\nnecessary.</p>\n<p>Gatsby 1.0 only loads the scripts necessary for the page you‚Äôre on. As you\nnavigate around, Gatsby loads the JavaScript needed for each route.</p>\n<p>This means that one page with heavy imports:</p>\n<pre><code class=\"language-javascript\"><span class=\"token keyword\">import</span> d3 <span class=\"token keyword\">from</span> <span class=\"token string\">\"d3\"</span>\n<span class=\"token keyword\">import</span> threejs <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-threejs\"</span></code></pre>\n<p>‚Ä¶won‚Äôt affect the performance of the rest of the site.</p>\n<p>This is particularly helpful for teams of people collaborating on a site\nwith pages with very different technical and business requirements.\nDifferent parts of the site can evolve independently of each other.</p>\n<p>One client I‚Äôm working with on Gatsby 1.0 (a stealth startup in San\nFrancisco) is using Gatsby to build both their marketing site <em>and</em> SaaS\napp within the <em>same Gatsby codebase</em>.</p>\n<p>The marketing pages of their site are built using markdown and React\ncomponents along with a modern css-in-js library\n<a href=\"https://github.com/threepointone/glamor\">Glamor</a> for styling.\nThe SaaS portion uses <a href=\"http://redux.js.org/\">Redux</a> to communicate with\ntheir Django API.</p>\n<p>The marketing portion of the site loads quickly with minimal JavaScript.\nWhen a potential customer goes to sign-up for the app, there‚Äôs no\n<em>awkward jump from the marketing website to the web app</em>‚Äîjust a simple\npage change which seamlessly loads in the needed JavaScript. The <em>team\nis sharing components and styles across the site</em> without stepping on\neach others shoes as they rapidly iterate on features.</p>\n<h3 id=\"plugin-and-theme-systems\"><a href=\"#plugin-and-theme-systems\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugin and Theme systems</h3>\n<p>Wordpress &#x26; Jekyll are both great examples of open source communities\nwith robust theme &#x26; plugins ecosystems.</p>\n<p>Themes and plugins help accelerate building as you can build on what\nothers have done and help collaborate with others on basic building\nblocks</p>\n<p>Gatsby 1.0 will be adding plugin and theme support.</p>\n<p>The plugin system will let you hook into lifecycle APIs from events\nduring the bootstrap and build processes and in the browser.</p>\n<p>There are a <a href=\"/docs/plugins/\">number of official Gatsby plugins</a> already\nbuilt‚Äîall distributed as separate NPM packages. It‚Äôll be easy to create\nyour own plugins for internal projects and as open source projects\npublished on NPM.</p>\n<p>Plugins can:</p>\n<ul>\n<li>add support for webpack loaders such as Sass, Less</li>\n<li>add drop-in support for lightweight React-compatible frameworks\n<a href=\"https://preactjs.com/\">Preact</a> and <a href=\"https://infernojs.org/\">Inferno</a></li>\n<li>add a sitemap or RSS feed</li>\n<li>add <a href=\"/docs/packages/gatsby-plugin-google-analytics/\">Google Analytics</a></li>\n<li>‚Ä¶and many more!</li>\n</ul>\n<p>Plugins also drive the new GraphQL data processing layer.</p>\n<p>The final pieces for theme support are coming soon. Gatsby‚Äôs theme system\nwill have some unique properties. You‚Äôll be able to add multiple themes\nto a site. So you could start a site with a ‚Äúblog‚Äù theme and later add\non a ‚Äúportfolio‚Äù theme. Themes will also be able to <em>compose</em> other\nthemes. So a large organization could have a standard ‚Äúbase‚Äù theme and\nthen individual departments could extend the base theme to meet their\nspecific requirements.</p>\n<p>Themes (like plugins) will be published on NPM. So soon, starting a new\nGatsby blog will be as simple as:</p>\n<pre><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save gatsby-super-cool-theme\ngatsby build --theme gatsby-super-cool-theme</code></pre>\n<h3 id=\"graphql-data-layer\"><a href=\"#graphql-data-layer\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL data layer</h3>\n<p>Currently data in Gatsby (like pretty much every static site generator)\nis processed then <em>pushed</em> into templates to be rendered into HTML. This\nis a simple pattern and works great for many use cases. But when you\nstart working on more complex sites, you really start to miss the\nflexibility of building a database-driven site. With a database, all\nyour data is available to query against in any fashion you‚Äôd like.\nWhatever bits of data you need to assemble a page, you can <em>pull</em> in.\nYou want to create author pages showing their bio and last 5 posts? It‚Äôs\njust a query away.</p>\n<p>I wanted this same flexibility for Gatsby. So for 1.0, I‚Äôve built a new\ndata processing layer which converts your static data files (or any\nother data source) into a <em>GraphQL schema</em> which you can query against\nlike a database.</p>\n<p>Every Gatsby page or page template can have a GraphQL query which tells\nGatsby what data is required for that page. The data layer runs the\nGraphQL queries during development and at build time and writes out a\nJSON file with the result of the query. This JSON file is then injected\ninto the React component as props.</p>\n<p>Because we know at build-time what data is needed for every page, we can\neasily pre-fetch page data meaning even very complex, data-heavy pages\nload almost instantly.</p>\n<p>This pattern of <em>colocating</em> your queries next to your views is copied\nfrom the <a href=\"https://facebook.github.io/relay/\">Relay data framework from\nFacebook</a>. Colocaton makes it easy to\nfully understand your views as everything necessary for that view\nis fully described there.</p>\n<p>A simple example of how this works in practice.</p>\n<p>Say we had a markdown file that looked like:</p>\n<pre><code class=\"language-markdown\"><span class=\"token hr punctuation\">---</span>\ntitle: A sweet post\n<span class=\"token title important\">date: \"2017-02-23\"\n<span class=\"token punctuation\">---</span></span>\n\nThis is my sweet blog post. <span class=\"token bold\"><span class=\"token punctuation\">**</span>Cool!<span class=\"token punctuation\">**</span></span></code></pre>\n<p>In our site, we would write a React component which acts as a template\nfor all the blog posts. Included with the component is an exported\n<code>pageQuery</code>.</p>\n<pre><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// A simple React component for rendering a blog page.</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BlogPostTemplate</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  render <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>markdown<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>small<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>markdown<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>small<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div\n        dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n          __html<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>markdown<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> BlogPostTemplate\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n  query BlogPost($slug: String!) {\n    markdown(slug: { eq: $slug }) {\n      // Get the markdown body compiled to HTML.\n      html\n      frontmatter {\n        title\n        // Transform the date at build time!\n        date(formatString: \"MMM D, YYYY\")\n      }\n    }\n  }\n`</span></span></code></pre>\n<p>All data parsing and processing is plugin-driven. So in time, any\nimaginable data format and source and potential way of processing its\ndata will be an npm install away.</p>\n<p>So far I‚Äôve focused on building out the markdown ecosystem. So there are\nplugins to <a href=\"/docs/packages/gatsby-parser-remark/\">parse markdown</a> and\nprocess it in a variety of ways (including <a href=\"/docs/packages/gatsby-typegen-remark-prismjs/\">adding syntax highlighting\nwith PrismJS</a> and\n<a href=\"/docs/packages/gatsby-typegen-remark-responsive-image/\">resizing images referenced in markdown\nfiles</a> so\nthey‚Äôre mobile ready). I‚Äôve also added parsers for\n<a href=\"/docs/packages/gatsby-parser-yaml/\">YAML</a>,\n<a href=\"/docs/packages/gatsby-parser-json/\">JSON</a>, and\n<a href=\"/docs/packages/gatsby-parser-sharp/\">images</a>.</p>\n<p>These plugins are easy to write (somewhat similar to webpack loaders) so\nI expect to see the list of plugins grow rapidly.</p>\n<p>The GraphQL layer can also connect to external data sources like\ndatabases, APIs, or 3rd party services e.g. the various hosted CMSs such\nas <a href=\"https://www.contentful.com/\">Contentful</a> and\n<a href=\"https://www.datocms.com/\">DataCMS</a>.</p>\n<h2 id=\"getting-started-with-gatsby-10\"><a href=\"#getting-started-with-gatsby-10\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting started with Gatsby 1.0</h2>\n<p>Gatsby 1.0 is still in alpha so I don‚Äôt recommend it yet for\ncasual use. If you don‚Äôt mind some growth pains and diving it to fix\nbugs and add features, Gatsby 1.0 is mostly feature-complete now and can\nbe used to build real sites.</p>\n<p>The first beta will be released in the coming weeks along with more\ndocumentation and a getting started tutorial. Subscribe to the <a href=\"https://github.com/gatsbyjs/gatsby/issues/419\">1.0 meta\nissue</a> on Github to get\nupdates.</p>\n<p>This has been a super fun project to work on. I‚Äôm really interested to\nhear your reactions and what kind of problems you face that you think\nGatsby will help with.</p>\n<p>If you‚Äôre interested in contributing, please join the <a href=\"https://discord.gg/0ZcbPKXt5bVoxkfV\">#gatsby\nchannel</a> on Discord, check out the\n<a href=\"https://github.com/gatsbyjs/gatsby/issues\">issues</a>, and help bikeshed\non names and APIs and other ideas.</p>",
            "excerpt": "Imagine for a moment the perfect website framework. One that produced\nreally fast sites by default, that let you use the latest web tools...",
            "timeToRead": 11,
            "fields": {
                "slug": "/blog/2017-02-21-1-0-progress-update-where-came-from-where-going/"
            },
            "frontmatter": {
                "title": "What's coming in Gatsby 1.0",
                "date": "Feb 23, 2017",
                "rawDate": "2017-02-23",
                "image": {
                    "childImageSharp": {
                        "resize": {
                            "src": "/36d57a55e7958223d8e1edc7d4bb0a38-7f8c7.png"
                        }
                    }
                },
                "author": {
                    "id": "Kyle Mathews",
                    "bio": "Founder @ GatsbyJS. Likes tech, reading/writing, founding things. Blogs at bricolage.io.",
                    "twitter": "@kylemathews",
                    "avatar": {
                        "childImageSharp": {
                            "responsiveResolution": {
                                "src": "/53e2930a00e3463fc960c3c2ff474c77-54d91.jpeg",
                                "srcSet": "/53e2930a00e3463fc960c3c2ff474c77-54d91.jpeg 1x,/53e2930a00e3463fc960c3c2ff474c77-7567f.jpeg 1.5x,/53e2930a00e3463fc960c3c2ff474c77-9a9f9.jpeg 2x,/53e2930a00e3463fc960c3c2ff474c77-0a328.jpeg 3x"
                            }
                        }
                    }
                }
            }
        }
    },
    "pathContext": {
        "slug": "/blog/2017-02-21-1-0-progress-update-where-came-from-where-going/"
    }
}