{
    "data": {
        "markdownRemark": {
            "html": "<p>Errors while building static HTML files generally happen for two reasons.</p>\n<ol>\n<li>\n<p>Some of your code references “browser globals” like window or\ndocument.  If this is your problem you should see an error above like\n“window is not defined”.  To fix this, find the offending code and either\na) check before calling the code if window is defined so the code doesn’t\nrun while gatsby is building or b) if the code is in the render function\nof a React.js component, move that code into “componentDidMount” which\nensures the code doesn’t run unless it’s in the browser.</p>\n</li>\n<li>\n<p>Some other reason :-) #1 is the most common reason building static\nfiles fail. If it’s another reason, you have to be a bit more creative in\nfiguring out the problem.</p>\n</li>\n</ol>\n<p>If you look above at the stack trace, you’ll see that all the file names\npoint to the same file, <code>render-page.js</code>. What is this? This is the\nJavaScript bundle that Gatsby creates for rendering HTML. It takes all\nthe code and data for your site and puts it in big bundle and then uses\nthat to generate all the HTML.</p>\n<p>Normally Gatsby deletes the file after building HTML is finished so you’d\nnever see it. But since the build failed, it’s still around and you can\nuse it to help debug why your build failed.</p>\n<p>So let’s open the file and dive in.</p>\n<p>The <code>render-page.js</code> file is in the “public” directory in your site\ndirectory. Open it up and then navigate to the line number listed in the\nfirst stack trace.  So if that line says something like:</p>\n<pre><code class=\"language-shell\">ReferenceError: window is not defined at Object.render\n(render-page.js:53450:6)</code></pre>\n<p>Then go to line #53450</p>\n<p>Here it gets a bit tricky. Once at that line, you’ll need to figure out\nwhere in your codebase the code is from. Sometimes it’s your own code and\nthat’s easy. But other times, the offending code is from a module that\nyou or worse 😱, a module many requires away from your code in some\nobscure module.</p>\n<p>In this worst case scenario, you can either grep node_modules for the\ncode or you can start back tracking up the stack trace (i.e. go to line\nnumber in the next referenced line) until you find code you recognize and\nwork from there.</p>",
            "frontmatter": {
                "title": "Debugging HTML Builds"
            }
        }
    },
    "pathContext": {
        "slug": "/docs/debugging-html-builds/"
    }
}