{"version":3,"sources":["../../src/cache-dir/root.js"],"names":["history","attachToHistory","window","___history","listen","location","action","shouldUpdateScroll","prevRouterProps","pathname","results","length","oldPathname","$","createElement","noMatch","find","r","path","addNotFoundRoute","key","component","components","componentChunkName","props","json","jsonName","navigateTo","push","___navigateTo","AltRouter","DefaultRouter","children","layout","layouts","Root","render","routeProps","layoutProps","page","matchPath","exact","WrappedRoot"],"mappings":"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","file":"root.js","sourcesContent":["import React, { createElement } from \"react\"\nimport {\n  BrowserRouter as Router,\n  Route,\n  matchPath,\n  withRouter,\n} from \"react-router-dom\"\nimport { ScrollContext } from \"react-router-scroll\"\nimport createHistory from \"history/createBrowserHistory\"\n\nimport apiRunner from \"./api-runner-browser\"\nimport syncRequires from \"./sync-requires\"\nimport pages from \"./pages.json\"\n\nconst history = createHistory()\n\nfunction attachToHistory(history) {\n  window.___history = history\n\n  history.listen((location, action) => {\n    apiRunner(`onRouteUpdate`, { location, action })\n  })\n}\n\nfunction shouldUpdateScroll(prevRouterProps, { location: { pathname } }) {\n  const results = apiRunner(`shouldUpdateScroll`, {\n    prevRouterProps,\n    pathname,\n  })\n  if (results.length > 0) {\n    return results[0]\n  }\n\n  if (prevRouterProps) {\n    const { location: { pathname: oldPathname } } = prevRouterProps\n    if (oldPathname === pathname) {\n      return false\n    }\n  }\n  return true\n}\n\nconst $ = React.createElement\n\nconst noMatch = pages.find(r => r.path === `/dev-404-page/`)\n\nconst addNotFoundRoute = () => {\n  if (noMatch) {\n    return createElement(Route, {\n      key: `404-page`,\n      component: props =>\n        createElement(syncRequires.components[noMatch.componentChunkName], {\n          ...props,\n          ...syncRequires.json[noMatch.jsonName],\n        }),\n    })\n  } else {\n    return null\n  }\n}\n\nconst navigateTo = pathname => {\n  window.___history.push(pathname)\n}\n\nwindow.___navigateTo = navigateTo\n\nconst AltRouter = apiRunner(`replaceRouterComponent`, { history })[0]\nconst DefaultRouter = ({ children }) => (\n  <Router history={history}>{children}</Router>\n)\n\n// Use default layout if one isn't set.\nlet layout\nif (syncRequires.layouts[`index`]) {\n  layout = syncRequires.layouts[`index`]\n} else {\n  layout = ({ children }) => <div>{children()}</div>\n}\n\nconst Root = () =>\n  createElement(\n    AltRouter ? AltRouter : DefaultRouter,\n    null,\n    createElement(\n      ScrollContext,\n      { shouldUpdateScroll },\n      createElement(withRouter(layout), {\n        children: layoutProps =>\n          createElement(Route, {\n            render: routeProps => {\n              attachToHistory(routeProps.history)\n\n              const props = layoutProps ? layoutProps : routeProps\n              const page = pages.find(page => {\n                if (page.matchPath) {\n                  // Try both the path and matchPath\n                  return (\n                    matchPath(props.location.pathname, { path: page.path }) ||\n                    matchPath(props.location.pathname, {\n                      path: page.matchPath,\n                    })\n                  )\n                } else {\n                  return matchPath(props.location.pathname, {\n                    path: page.path,\n                    exact: true,\n                  })\n                }\n              })\n              if (page) {\n                return createElement(\n                  syncRequires.components[page.componentChunkName],\n                  {\n                    ...props,\n                    ...syncRequires.json[page.jsonName],\n                  }\n                )\n              } else {\n                return addNotFoundRoute()\n              }\n            },\n          }),\n      })\n    )\n  )\n\n// Let site, plugins wrap the site e.g. for Redux.\nconst WrappedRoot = apiRunner(`wrapRootComponent`, { Root }, Root)[0]\n\nexport default WrappedRoot\n"]}